/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var child_process = require('child_process');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var DEFAULT_SETTINGS = {
    pythonBinaryPath: '/path/to/python3',
    bibleParserScriptPath: '/path/to/bible_parser.py',
    passageDirectory: 'Bible Passages',
    debugMode: false,
    existingBibleFolder: 'Sources/The Bible',
    validBibleBooksPath: 'Utility/valid_bible_books.json',
    bibleStructurePath: 'Utility/bible_structure.json'
};
var PLUGIN_DISPLAY_NAME = 'Bible Reference Plugin';
var DEBOUNCE_DELAY = 3000; // in milliseconds
/**
 * Main plugin class.
 */
var BibleReferencePlugin = /** @class */ (function (_super) {
    __extends(BibleReferencePlugin, _super);
    function BibleReferencePlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.debounceTimers = new Map();
        _this.filesBeingModified = new Set();
        // Externalized datasets
        _this.BIBLE_STRUCTURE = {};
        _this.VALID_BIBLE_BOOKS = {};
        return _this;
    }
    BibleReferencePlugin.prototype.onLayoutReady = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Layout ready for ".concat(PLUGIN_DISPLAY_NAME, "..."));
                        // Load settings
                        return [4 /*yield*/, this.loadSettings()];
                    case 1:
                        // Load settings
                        _a.sent();
                        this.addSettingTab(new BibleReferenceSettingTab(this.app, this));
                        // Load datasets
                        return [4 /*yield*/, this.loadValidBibleBooks()];
                    case 2:
                        // Load datasets
                        _a.sent();
                        return [4 /*yield*/, this.loadBibleStructure()];
                    case 3:
                        _a.sent();
                        // Register any additional event listeners if necessary
                        this.registerFileModifyEvent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BibleReferencePlugin.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                console.log("Loading ".concat(PLUGIN_DISPLAY_NAME, "..."));
                // Enhanced Regex to match valid references like "Genesis 1:1-5" or "John 3:16"
                this.bibleRefRegex = new RegExp(
                // Optional number for books like "1 Samuel"
                '(?:\\b\\d+\\s)?' +
                    // Book name (allowing letters, spaces, and periods for abbreviations)
                    '[A-Za-z. ]+' +
                    '\\s+' +
                    // Chapter number
                    '\\d+' +
                    // Verse range or single verse
                    '(?::\\d+)' +
                    // Optional range with chapter and verse or just verse
                    '(?:\\s?-\\s?(?:(\\d+):)?(\\d+))?', 'i');
                this.app.workspace.onLayoutReady(function () { return _this.onLayoutReady(); });
                return [2 /*return*/];
            });
        });
    };
    BibleReferencePlugin.prototype.onunload = function () {
        console.log("Unloading ".concat(PLUGIN_DISPLAY_NAME, "..."));
    };
    /**
     * Loads settings from the plugin’s data.json file.
     */
    BibleReferencePlugin.prototype.loadSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var loadedData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadData()];
                    case 1:
                        loadedData = _a.sent();
                        this.settings = __assign(__assign({}, DEFAULT_SETTINGS), loadedData);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Saves the current settings to the plugin’s data.json file.
     */
    BibleReferencePlugin.prototype.saveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Prints a debug message to the console if debug mode is enabled.
     */
    BibleReferencePlugin.prototype.debugLog = function (message) {
        if (this.settings.debugMode) {
            console.log("[DEBUG] ".concat(message));
        }
    };
    /**
     * Loads the VALID_BIBLE_BOOKS dataset from an external JSON file.
     */
    BibleReferencePlugin.prototype.loadValidBibleBooks = function () {
        return __awaiter(this, void 0, void 0, function () {
            var filePath, file, content, loadedBooks, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filePath = this.settings.validBibleBooksPath;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        file = this.app.vault.getAbstractFileByPath(filePath);
                        if (!(file && file instanceof obsidian.TFile)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.app.vault.read(file)];
                    case 2:
                        content = _a.sent();
                        this.VALID_BIBLE_BOOKS = JSON.parse(content);
                        this.debugLog('VALID_BIBLE_BOOKS loaded successfully.');
                        loadedBooks = Object.keys(this.VALID_BIBLE_BOOKS);
                        this.debugLog("Loaded VALID_BIBLE_BOOKS: ".concat(loadedBooks.join(', ')));
                        return [3 /*break*/, 4];
                    case 3:
                        this.debugLog("valid_bible_books.json not found at path: \"".concat(filePath, "\"."));
                        new obsidian.Notice("Bible book aliases data not found. Please ensure \"valid_bible_books.json\" is placed correctly.");
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        error_1 = _a.sent();
                        console.error('Error loading valid_bible_books.json:', error_1);
                        this.debugLog('Failed to load VALID_BIBLE_BOOKS.');
                        new obsidian.Notice("Failed to load Bible book aliases. Check console for details.");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Loads the BIBLE_STRUCTURE dataset from an external JSON file.
     */
    BibleReferencePlugin.prototype.loadBibleStructure = function () {
        return __awaiter(this, void 0, void 0, function () {
            var structurePath, file, content, loadedBooks, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        structurePath = this.settings.bibleStructurePath;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        file = this.app.vault.getAbstractFileByPath(structurePath);
                        if (!(file && file instanceof obsidian.TFile)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.app.vault.read(file)];
                    case 2:
                        content = _a.sent();
                        this.BIBLE_STRUCTURE = JSON.parse(content);
                        this.debugLog('BIBLE_STRUCTURE loaded successfully.');
                        loadedBooks = Object.keys(this.BIBLE_STRUCTURE);
                        this.debugLog("Loaded BIBLE_STRUCTURE: ".concat(loadedBooks.join(', ')));
                        return [3 /*break*/, 4];
                    case 3:
                        this.debugLog("bible_structure.json not found at path: \"".concat(structurePath, "\"."));
                        new obsidian.Notice("Bible structure data not found. Please ensure \"bible_structure.json\" is placed correctly.");
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        error_2 = _a.sent();
                        console.error('Error loading bible_structure.json:', error_2);
                        this.debugLog('Failed to load BIBLE_STRUCTURE.');
                        new obsidian.Notice("Failed to load Bible structure data. Check console for details.");
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /* ---------------------------------------------------------------------------
     * Event Registrations
     * -------------------------------------------------------------------------*/
    /**
     * Trigger on file "modify" (which corresponds to save).
     */
    BibleReferencePlugin.prototype.registerFileModifyEvent = function () {
        var _this = this;
        this.registerEvent(this.app.vault.on('modify', function (file) { return __awaiter(_this, void 0, void 0, function () {
            var timer;
            var _this = this;
            return __generator(this, function (_a) {
                if (file instanceof obsidian.TFile) {
                    this.debugLog("Modify event detected for file: ".concat(file.path));
                    // Prevent processing files being modified by the plugin itself
                    if (this.filesBeingModified.has(file.path)) {
                        this.debugLog("Skipping processing for file \"".concat(file.path, "\" as it's being modified by the plugin."));
                        return [2 /*return*/];
                    }
                    // Implement debounce to prevent excessive triggering
                    if (this.debounceTimers.has(file.path)) {
                        clearTimeout(this.debounceTimers.get(file.path));
                    }
                    timer = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.debounceTimers["delete"](file.path);
                                    return [4 /*yield*/, this.processFileReferences(file, 'File Saved')];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); }, DEBOUNCE_DELAY);
                    this.debounceTimers.set(file.path, timer);
                }
                return [2 /*return*/];
            });
        }); }));
    };
    /* ---------------------------------------------------------------------------
     * Core Reference Processing
     * -------------------------------------------------------------------------*/
    /**
     * Scans the file for wiki links like [[John 3:16]] or [[Genesis 1:1]].
     * If a match is found that looks like a Bible reference, create or link the passage note.
     */
    BibleReferencePlugin.prototype.processFileReferences = function (file, eventSource) {
        return __awaiter(this, void 0, void 0, function () {
            var content, wikiLinkRegex, match, referencesToProcess, illegalReferences, reference, uniqueReferences, _i, uniqueReferences_1, reference, updatedContent, _a, uniqueReferences_2, reference, canonicalRef, escapedReference, regex, error_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.debugLog("Processing references triggered by: ".concat(eventSource, " for file \"").concat(file.path, "\""));
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 9, , 10]);
                        return [4 /*yield*/, this.app.vault.read(file)];
                    case 2:
                        content = _b.sent();
                        wikiLinkRegex = /\[\[([^\]|]+)(?:\|[^\]]+)?\]\]/g;
                        match = void 0;
                        referencesToProcess = [];
                        illegalReferences = [];
                        while ((match = wikiLinkRegex.exec(content)) !== null) {
                            reference = match[1].trim();
                            if (this.bibleRefRegex.test(reference)) {
                                if (this.isValidReference(reference)) {
                                    this.debugLog("Valid Bible reference found in \"".concat(file.basename, "\": ").concat(reference));
                                    referencesToProcess.push(reference);
                                }
                                else {
                                    this.debugLog("Illegal Bible reference detected in \"".concat(file.basename, "\": ").concat(reference));
                                    illegalReferences.push(reference);
                                }
                            }
                        }
                        // Handle illegal references
                        if (illegalReferences.length > 0) {
                            new obsidian.Notice("Found ".concat(illegalReferences.length, " illegal Bible reference(s) in \"").concat(file.basename, "\". Check console for details."));
                            if (this.settings.debugMode) {
                                console.warn("Illegal Bible references in \"".concat(file.path, "\":"), illegalReferences);
                            }
                        }
                        if (referencesToProcess.length === 0) {
                            this.debugLog("No valid Bible references to process in \"".concat(file.path, "\"."));
                            return [2 /*return*/];
                        }
                        uniqueReferences = Array.from(new Set(referencesToProcess));
                        _i = 0, uniqueReferences_1 = uniqueReferences;
                        _b.label = 3;
                    case 3:
                        if (!(_i < uniqueReferences_1.length)) return [3 /*break*/, 6];
                        reference = uniqueReferences_1[_i];
                        return [4 /*yield*/, this.getOrCreatePassage(reference)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 3];
                    case 6:
                        updatedContent = content;
                        for (_a = 0, uniqueReferences_2 = uniqueReferences; _a < uniqueReferences_2.length; _a++) {
                            reference = uniqueReferences_2[_a];
                            canonicalRef = reference.replace(':', '-');
                            escapedReference = this.escapeRegExp(reference);
                            regex = new RegExp("\\[\\[".concat(escapedReference, "\\]\\]"), 'g');
                            updatedContent = updatedContent.replace(regex, "[[".concat(canonicalRef, "|").concat(reference, "]]"));
                        }
                        if (!(updatedContent !== content)) return [3 /*break*/, 8];
                        this.filesBeingModified.add(file.path);
                        return [4 /*yield*/, this.app.vault.modify(file, updatedContent)];
                    case 7:
                        _b.sent();
                        this.filesBeingModified["delete"](file.path);
                        this.debugLog("Updated references in file \"".concat(file.path, "\"."));
                        new obsidian.Notice("Updated Bible references in \"".concat(file.basename, "\"."));
                        _b.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        error_3 = _b.sent();
                        console.error("Error processing file references for \"".concat(file.path, "\":"), error_3);
                        new obsidian.Notice("Error processing Bible references in \"".concat(file.basename, "\". Check console for details."));
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Validates the Bible reference to ensure it follows proper syntax, has a valid book name,
     * and that the specified chapters and verses exist within the book.
     * For example, ensures that ranges include both chapter and verse if necessary.
     */
    BibleReferencePlugin.prototype.isValidReference = function (reference) {
        // Split the reference into parts using the existing regex
        var refRegex = /^(?:(\d+)\s)?([A-Za-z. ]+)\s+(\d+):(\d+)(?:\s?-\s?(?:(\d+):)?(\d+))?$/;
        var match = reference.match(refRegex);
        if (!match) {
            this.debugLog("Reference \"".concat(reference, "\" does not match the regex."));
            return false;
        }
        var bookNumber = match[1], bookName = match[2], startChapter = match[3], startVerse = match[4], endChapter = match[5], endVerse = match[6];
        // Normalize the book name for validation
        var normalizedBookName = this.normalizeBookName(bookNumber, bookName);
        this.debugLog("Normalized book name: \"".concat(normalizedBookName, "\""));
        if (!this.isValidBookName(normalizedBookName)) {
            this.debugLog("Book name \"".concat(normalizedBookName, "\" is not valid."));
            return false;
        }
        // Check if the book exists in the BIBLE_STRUCTURE dataset
        if (!this.BIBLE_STRUCTURE[normalizedBookName]) {
            this.debugLog("Book \"".concat(normalizedBookName, "\" not found in BIBLE_STRUCTURE dataset."));
            return false;
        }
        // Log the number of chapters
        var totalChapters = this.BIBLE_STRUCTURE[normalizedBookName].length;
        this.debugLog("Book \"".concat(normalizedBookName, "\" has ").concat(totalChapters, " chapters."));
        // Basic numerical validation
        var startChap = parseInt(startChapter, 10);
        var startVes = parseInt(startVerse, 10);
        var endChap = endChapter ? parseInt(endChapter, 10) : startChap;
        var endVes = endVerse ? parseInt(endVerse, 10) : startVes;
        if (isNaN(startChap) || isNaN(startVes) || isNaN(endChap) || isNaN(endVes)) {
            this.debugLog("Reference \"".concat(reference, "\" contains invalid numbers."));
            return false;
        }
        // Ensure that the start chapter exists
        if (startChap < 1 || startChap > totalChapters) {
            this.debugLog("Start chapter ".concat(startChap, " does not exist in \"").concat(normalizedBookName, "\"."));
            return false;
        }
        // Ensure that the start verse exists
        var startChapterVerseCount = this.BIBLE_STRUCTURE[normalizedBookName][startChap - 1];
        this.debugLog("Book \"".concat(normalizedBookName, "\" Chapter ").concat(startChap, " has ").concat(startChapterVerseCount, " verses."));
        if (startVes < 1 || startVes > startChapterVerseCount) {
            this.debugLog("Start verse ".concat(startVes, " does not exist in \"").concat(normalizedBookName, "\" Chapter ").concat(startChap, "."));
            return false;
        }
        // Ensure that the end chapter exists
        if (endChap < startChap || endChap > totalChapters) {
            this.debugLog("End chapter ".concat(endChap, " does not exist in \"").concat(normalizedBookName, "\"."));
            return false;
        }
        // Ensure that the end verse exists
        var endChapterVerseCount = this.BIBLE_STRUCTURE[normalizedBookName][endChap - 1];
        this.debugLog("Book \"".concat(normalizedBookName, "\" Chapter ").concat(endChap, " has ").concat(endChapterVerseCount, " verses."));
        if (endVes < 1 || endVes > endChapterVerseCount) {
            this.debugLog("End verse ".concat(endVes, " does not exist in \"").concat(normalizedBookName, "\" Chapter ").concat(endChap, "."));
            return false;
        }
        // If the range spans the same chapter, ensure end verse >= start verse
        if (endChap === startChap && endVes < startVes) {
            this.debugLog("End verse ".concat(endVes, " is less than start verse ").concat(startVes, " in Chapter ").concat(startChap, "."));
            return false;
        }
        return true;
    };
    /**
     * Normalizes the book name by combining the numerical prefix (if any) with the book name
     * and converting shorthand names to their long-form equivalents.
     * For example, ("1", "Samuel") => "1 Samuel", or ("", "Gen") => "Genesis".
     */
    BibleReferencePlugin.prototype.normalizeBookName = function (bookNumber, bookName) {
        var trimmedName = bookName.replace(/\.$/, '').trim(); // Remove trailing period and trim
        var normalized = trimmedName;
        // Check if the book name is a shorthand and map it to the long-form
        for (var _i = 0, _a = Object.entries(this.VALID_BIBLE_BOOKS); _i < _a.length; _i++) {
            var _b = _a[_i], longForm = _b[0], aliases = _b[1];
            if (longForm.toLowerCase() === trimmedName.toLowerCase() || aliases.some(function (alias) { return alias.toLowerCase() === trimmedName.toLowerCase(); })) {
                normalized = longForm; // Convert to long-form name
                break;
            }
        }
        // Combine with book number if provided
        if (bookNumber) {
            return "".concat(bookNumber, " ").concat(normalized);
        }
        if (!normalized) {
            this.debugLog("No matching long-form name found for \"".concat(bookName, "\"."));
            return null; // Return null if no match is found
        }
        return normalized;
    };
    /**
     * Checks if the provided book name is a valid Bible book.
     * Supports both full names and common abbreviations.
     */
    BibleReferencePlugin.prototype.isValidBookName = function (bookName) {
        // Iterate through each book and its aliases
        for (var _i = 0, _a = Object.entries(this.VALID_BIBLE_BOOKS); _i < _a.length; _i++) {
            var _b = _a[_i], standardName = _b[0], aliases = _b[1];
            this.debugLog("Checking aliases for book \"".concat(standardName, "\": ").concat(aliases.join(', ')));
            for (var _c = 0, aliases_1 = aliases; _c < aliases_1.length; _c++) {
                var alias = aliases_1[_c];
                if (alias.toLowerCase() === bookName.toLowerCase()) {
                    this.debugLog("Match found: \"".concat(alias, "\" matches \"").concat(bookName, "\""));
                    return true;
                }
            }
        }
        this.debugLog("No matching aliases found for book \"".concat(bookName, "\""));
        return false;
    };
    /**
     * Checks if a note already exists in the user-chosen "existingBibleFolder".
     * If not, creates one in "passageDirectory" using data from the Python script.
     */
    BibleReferencePlugin.prototype.getOrCreatePassage = function (reference) {
        return __awaiter(this, void 0, void 0, function () {
            var existingFile, passageData, canonicalRef, canonicalPath, content, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        existingFile = this.findFileInFolder(this.settings.existingBibleFolder, reference);
                        if (existingFile) {
                            this.debugLog("Found existing note for \"".concat(reference, "\" at \"").concat(existingFile.path, "\"."));
                            return [2 /*return*/];
                        }
                        // 2. If not found, create a new note in passageDirectory
                        return [4 /*yield*/, this.ensureFolderExists(this.settings.passageDirectory)];
                    case 1:
                        // 2. If not found, create a new note in passageDirectory
                        _a.sent();
                        return [4 /*yield*/, this.fetchPassage(reference)];
                    case 2:
                        passageData = _a.sent();
                        if (!passageData) {
                            this.debugLog("No passage data returned for \"".concat(reference, "\"."));
                            new obsidian.Notice("Failed to fetch passage for \"".concat(reference, "\"."));
                            return [2 /*return*/];
                        }
                        canonicalRef = passageData.canonical.replace(':', '-');
                        if (!canonicalRef) {
                            this.debugLog("No valid canonical reference returned for \"".concat(reference, "\"."));
                            new obsidian.Notice("Invalid reference format for \"".concat(reference, "\"."));
                            return [2 /*return*/];
                        }
                        canonicalPath = "".concat(this.settings.passageDirectory, "/").concat(canonicalRef, ".md");
                        content = this.formatNoteContent(passageData, reference);
                        // 7. Write the new file
                        return [4 /*yield*/, this.app.vault.create(canonicalPath, content)];
                    case 3:
                        // 7. Write the new file
                        _a.sent();
                        this.debugLog("Created passage note: ".concat(canonicalPath));
                        new obsidian.Notice("Created passage note for \"".concat(reference, "\"."));
                        return [3 /*break*/, 5];
                    case 4:
                        error_4 = _a.sent();
                        console.error("Error in getOrCreatePassage for \"".concat(reference, "\":"), error_4);
                        new obsidian.Notice("Error creating passage note for \"".concat(reference, "\"."));
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Finds a file whose base name matches the reference (with ":" replaced by "-")
     * within the specified folder path.
     */
    BibleReferencePlugin.prototype.findFileInFolder = function (folderPath, reference) {
        var targetBasename = reference.replace(':', '-');
        var folder = this.app.vault.getAbstractFileByPath(folderPath);
        if (!folder || !(folder instanceof obsidian.TFolder)) {
            this.debugLog("Folder not found or not a folder: \"".concat(folderPath, "\"."));
            return null;
        }
        // Recursively search all files in that folder
        var files = this.getAllFilesInFolder(folder);
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var file = files_1[_i];
            if (file.basename === targetBasename) {
                return file;
            }
        }
        return null;
    };
    /**
     * Recursively gathers all TFile objects within a TFolder.
     */
    BibleReferencePlugin.prototype.getAllFilesInFolder = function (folder) {
        var results = [];
        for (var _i = 0, _a = folder.children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (child instanceof obsidian.TFile) {
                results.push(child);
            }
            else if (child instanceof obsidian.TFolder) {
                results = results.concat(this.getAllFilesInFolder(child));
            }
        }
        return results;
    };
    /**
     * Ensures the user-specified folder exists. If not, creates it.
     */
    BibleReferencePlugin.prototype.ensureFolderExists = function (folderPath) {
        return __awaiter(this, void 0, void 0, function () {
            var folder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        folder = this.app.vault.getAbstractFileByPath(folderPath);
                        if (!!folder) return [3 /*break*/, 2];
                        this.debugLog("Creating folder: \"".concat(folderPath, "\"."));
                        return [4 /*yield*/, this.app.vault.createFolder(folderPath)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /* ---------------------------------------------------------------------------
     * Python Script Integration
     * -------------------------------------------------------------------------*/
    /**
     * Spawns the python script with the given reference, then parses and returns
     * the passage data.
     */
    BibleReferencePlugin.prototype.fetchPassage = function (reference) {
        return __awaiter(this, void 0, void 0, function () {
            var pythonExe, scriptPath;
            var _this = this;
            return __generator(this, function (_a) {
                pythonExe = this.settings.pythonBinaryPath || 'python3';
                scriptPath = this.settings.bibleParserScriptPath;
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.debugLog("Running Python script: \"".concat(scriptPath, "\" with reference: \"").concat(reference, "\""));
                        var child = child_process.spawn(pythonExe, [scriptPath, reference]);
                        var stdoutData = '';
                        var stderrData = '';
                        child.stdout.on('data', function (chunk) {
                            stdoutData += chunk.toString();
                        });
                        child.stderr.on('data', function (chunk) {
                            stderrData += chunk.toString();
                        });
                        child.on('error', function (err) {
                            _this.debugLog("Failed to start Python script: ".concat(err.message));
                            reject(null);
                        });
                        child.on('close', function (code) {
                            _this.debugLog("Python script exited with code: ".concat(code));
                            if (code !== 0) {
                                console.error("Error running Python script:\n".concat(stderrData));
                                reject(null);
                                return;
                            }
                            // Parse output lines (simple text-based approach)
                            var lines = stdoutData.split('\n').map(function (l) { return l.trim(); }).filter(Boolean);
                            var verseStrings = [];
                            for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
                                var line = lines_1[_i];
                                if (line.startsWith('SUBTITLE:')) {
                                    var subtitle = line.replace('SUBTITLE:', '').trim();
                                    verseStrings.push("## ".concat(subtitle));
                                }
                                else if (line.startsWith('VERSE ')) {
                                    var match = line.match(/^VERSE\s+(\d+):\s*(.*)$/);
                                    if (match) {
                                        var verseNum = match[1];
                                        var verseText = match[2];
                                        verseStrings.push("".concat(verseNum, ". ").concat(verseText));
                                    }
                                }
                                else {
                                    verseStrings.push(line);
                                }
                            }
                            // Replace ":" with "-" in the canonical reference
                            var canonicalRef = reference.replace(':', '-');
                            resolve({
                                canonical: canonicalRef,
                                passages: [verseStrings.join('\n')],
                                query: reference
                            });
                        });
                    })];
            });
        });
    };
    /**
     * Formats the passage data into Markdown with frontmatter aliases.
     */
    BibleReferencePlugin.prototype.formatNoteContent = function (passageData, userQuery) {
        var _a, _b, _c;
        var canonical = (_a = passageData.canonical) !== null && _a !== void 0 ? _a : '';
        var aliases = new Set([canonical, passageData.query, userQuery]);
        return "---\naliases: [".concat(Array.from(aliases).map(function (alias) { return "\"".concat(alias, "\""); }).join(', '), "]\ncssclasses: 'bible_reference'\n---\n    \n").concat((_c = (_b = passageData.passages) === null || _b === void 0 ? void 0 : _b.join('\n')) !== null && _c !== void 0 ? _c : '', "\n");
    };
    /**
     * Escapes special characters in a string for use in a regular expression.
     */
    BibleReferencePlugin.prototype.escapeRegExp = function (string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    };
    return BibleReferencePlugin;
}(obsidian.Plugin));
/**
 * Plugin Setting Tab for the Bible Reference plugin.
 */
var BibleReferenceSettingTab = /** @class */ (function (_super) {
    __extends(BibleReferenceSettingTab, _super);
    function BibleReferenceSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    /**
     * Renders the plugin's settings UI.
     */
    BibleReferenceSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h1', { text: "".concat(PLUGIN_DISPLAY_NAME, " Settings") });
        new obsidian.Setting(containerEl)
            .setName('Python Binary Path')
            .setDesc('Path to the Python interpreter. (e.g., /usr/bin/python3)')
            .addText(function (text) {
            return text
                .setPlaceholder('python3')
                .setValue(_this.plugin.settings.pythonBinaryPath)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.pythonBinaryPath = value.trim();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Path to bible_parser.py')
            .setDesc('Absolute path to your "bible_parser.py" script.')
            .addText(function (text) {
            return text
                .setPlaceholder('/path/to/bible_parser.py')
                .setValue(_this.plugin.settings.bibleParserScriptPath)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.bibleParserScriptPath = value.trim();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Passage Note Directory')
            .setDesc('Folder where new notes are created (if none found).')
            .addText(function (txt) {
            return txt
                .setValue(_this.plugin.settings.passageDirectory)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.passageDirectory = value.trim();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Existing Bible Folder')
            .setDesc('Folder containing chapter-based Bible notes.')
            .addText(function (txt) {
            return txt
                .setPlaceholder('Sources/The Bible')
                .setValue(_this.plugin.settings.existingBibleFolder)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.existingBibleFolder = value.trim();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Debug Mode')
            .setDesc('If enabled, prints debug logs to console.')
            .addToggle(function (toggle) {
            return toggle
                .setValue(_this.plugin.settings.debugMode)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.debugMode = value;
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Path to valid_bible_books.json')
            .setDesc('Relative path within your vault to "valid_bible_books.json".')
            .addText(function (text) {
            return text
                .setPlaceholder('valid_bible_books.json')
                .setValue(_this.plugin.settings.validBibleBooksPath)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.validBibleBooksPath = value.trim();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.plugin.loadValidBibleBooks()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Path to bible_structure.json')
            .setDesc('Relative path within your vault to "bible_structure.json".')
            .addText(function (text) {
            return text
                .setPlaceholder('bible_structure.json')
                .setValue(_this.plugin.settings.bibleStructurePath)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.bibleStructurePath = value.trim();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.plugin.loadBibleStructure()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    };
    return BibleReferenceSettingTab;
}(obsidian.PluginSettingTab));

module.exports = BibleReferencePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
